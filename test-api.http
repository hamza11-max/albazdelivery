### AL-baz Delivery API Tests
### Use with REST Client VS Code extension or copy to Postman

@baseUrl = http://localhost:3000
@authToken = your-jwt-token-here

### ========================================
### 1. AUTHENTICATION
### ========================================

### Register a new customer (auto-approved)
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Ahmed Benali",
  "email": "ahmed@example.com",
  "phone": "0551234567",
  "password": "Password123!",
  "role": "CUSTOMER",
  "city": "Algiers"
}

### Register a vendor (requires admin approval)
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Pizza Place",
  "email": "pizza@example.com",
  "phone": "0661234567",
  "password": "Password123!",
  "role": "VENDOR",
  "shopType": "Restaurant",
  "city": "Oran"
}

### Register a driver (requires admin approval)
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "name": "Karim Driver",
  "email": "karim@example.com",
  "phone": "0771234567",
  "password": "Password123!",
  "role": "DRIVER",
  "licenseNumber": "DZ123456",
  "vehicleType": "Motorcycle",
  "city": "Constantine"
}

### Login as Admin (API Testing)
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "admin@albazdelivery.com",
  "password": "Admin123!"
}

### Login as Customer
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "customer@test.com",
  "password": "Customer123!"
}

### Login as Vendor
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "vendor@test.com",
  "password": "Vendor123!"
}

### Login as Driver
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "driver@test.com",
  "password": "Driver123!"
}

### ========================================
### 2. PRODUCTS
### ========================================

### Get all products (with search)
GET {{baseUrl}}/api/products?search=pizza&category=food
Authorization: Bearer {{authToken}}

### Get products for a specific store
GET {{baseUrl}}/api/products?storeId=store-id-here
Authorization: Bearer {{authToken}}

### Update product availability (vendor only)
PATCH {{baseUrl}}/api/products
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "productId": "product-id-here",
  "available": false
}

### ========================================
### 3. ORDERS
### ========================================

### Get my orders (customer)
GET {{baseUrl}}/api/orders
Authorization: Bearer {{authToken}}

### Get orders by status
GET {{baseUrl}}/api/orders?status=PENDING
Authorization: Bearer {{authToken}}

### Create a new order
POST {{baseUrl}}/api/orders
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "storeId": "store-id-here",
  "items": [
    {
      "productId": "product-id-1",
      "quantity": 2,
      "price": 500
    },
    {
      "productId": "product-id-2",
      "quantity": 1,
      "price": 300
    }
  ],
  "subtotal": 1300,
  "deliveryFee": 200,
  "total": 1500,
  "paymentMethod": "CASH",
  "deliveryAddress": "123 Rue de la Paix",
  "city": "Algiers",
  "customerPhone": "0551234567"
}

### ========================================
### 4. DRIVER DELIVERIES
### ========================================

### Get available deliveries (driver)
GET {{baseUrl}}/api/drivers/deliveries?available=true
Authorization: Bearer {{authToken}}

### Get my assigned deliveries
GET {{baseUrl}}/api/drivers/deliveries
Authorization: Bearer {{authToken}}

### Accept a delivery
POST {{baseUrl}}/api/drivers/deliveries
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "orderId": "order-id-here"
}

### ========================================
### 5. WALLET
### ========================================

### Get wallet balance
GET {{baseUrl}}/api/wallet/balance
Authorization: Bearer {{authToken}}

### Get wallet balance for specific customer (admin)
GET {{baseUrl}}/api/wallet/balance?customerId=customer-id-here
Authorization: Bearer {{authToken}}

### Add funds to wallet (admin)
POST {{baseUrl}}/api/wallet/balance
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "customerId": "customer-id-here",
  "amount": 1000,
  "description": "Wallet top-up"
}

### Deduct funds (refund, admin)
POST {{baseUrl}}/api/wallet/balance
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "customerId": "customer-id-here",
  "amount": -500,
  "description": "Refund for order #123"
}

### ========================================
### 6. LOYALTY PROGRAM
### ========================================

### Get loyalty account
GET {{baseUrl}}/api/loyalty/account
Authorization: Bearer {{authToken}}

### Get loyalty account for specific customer (admin)
GET {{baseUrl}}/api/loyalty/account?customerId=customer-id-here
Authorization: Bearer {{authToken}}

### Add loyalty points (admin)
POST {{baseUrl}}/api/loyalty/account
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "customerId": "customer-id-here",
  "points": 100,
  "description": "Bonus points for new customer"
}

### Deduct loyalty points (admin)
POST {{baseUrl}}/api/loyalty/account
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "customerId": "customer-id-here",
  "points": -50,
  "description": "Points redeemed for discount",
  "orderId": "order-id-here"
}

### ========================================
### 7. NOTIFICATIONS
### ========================================

### Get all notifications
GET {{baseUrl}}/api/notifications
Authorization: Bearer {{authToken}}

### Get unread notifications only
GET {{baseUrl}}/api/notifications?unreadOnly=true
Authorization: Bearer {{authToken}}

### Get notifications with pagination
GET {{baseUrl}}/api/notifications?page=1&limit=20
Authorization: Bearer {{authToken}}

### Mark notification as read
PUT {{baseUrl}}/api/notifications
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "notificationId": "notification-id-here"
}

### Mark all notifications as read
PUT {{baseUrl}}/api/notifications
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "markAllAsRead": true
}

### Delete a notification
DELETE {{baseUrl}}/api/notifications?id=notification-id-here
Authorization: Bearer {{authToken}}

### Delete all read notifications
DELETE {{baseUrl}}/api/notifications?all=true
Authorization: Bearer {{authToken}}

### ========================================
### 8. ADMIN - USER MANAGEMENT
### ========================================

### Get all users
GET {{baseUrl}}/api/admin/users
Authorization: Bearer {{authToken}}

### Get users by role
GET {{baseUrl}}/api/admin/users?role=VENDOR
Authorization: Bearer {{authToken}}

### Get users by status
GET {{baseUrl}}/api/admin/users?status=APPROVED
Authorization: Bearer {{authToken}}

### Get users with pagination
GET {{baseUrl}}/api/admin/users?page=1&limit=10
Authorization: Bearer {{authToken}}

### ========================================
### 9. ADMIN - REGISTRATION REQUESTS
### ========================================

### Get pending registration requests
GET {{baseUrl}}/api/admin/registration-requests
Authorization: Bearer {{authToken}}

### Get requests by role
GET {{baseUrl}}/api/admin/registration-requests?role=VENDOR
Authorization: Bearer {{authToken}}

### Approve registration request
POST {{baseUrl}}/api/admin/registration-requests
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "requestId": "request-id-here",
  "action": "approve"
}

### Reject registration request
POST {{baseUrl}}/api/admin/registration-requests
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "requestId": "request-id-here",
  "action": "reject"
}

### ========================================
### NOTES
### ========================================

# To use these requests:
# 1. Install "REST Client" VS Code extension
# 2. Start your dev server: pnpm dev
# 3. Login first to get a JWT token
# 4. Copy the token to @authToken variable at the top
# 5. Click "Send Request" above any ### endpoint

# Or copy these to Postman:
# 1. Create new collection
# 2. Set baseUrl variable to http://localhost:3000
# 3. Add Bearer token in Authorization tab
# 4. Import these requests
